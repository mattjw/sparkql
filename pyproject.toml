[tool.poetry]
name = "sparkql"
version = "0.5.1"  # do not edit manually. kept in sync with `tool.commitizen` config via automation
description = "sparkql: Apache Spark SQL DataFrame schema management for sensible humans"
authors = ["Matt J Williams <mattjw@mattjw.net>"]
repository = "https://github.com/mattjw/sparkql"
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "~3.6 || ~3.7"
pyspark = "^2.4.1"
dataclasses = { version = "~0.7.0", python="~3.6" }  # The dataclass module is not in the stdlib in Python 3.6

[tool.poetry.dev-dependencies]
pytest = "~5.3"
invoke = "~1.3"
black = {version = "^18.3-alpha.0", allow-prereleases = true}
pycodestyle = "~2.5"
pydocstyle = "~5.0"
pytype = "2020.2.6"
pylint = "~2.4.4"
pytest-spark = "~0.5.2"
termcolor = "~1.1.0"
commitizen = "~1.14.2"
tomlkit = "~0.5.8"
pytest-only = "~=1.2.2"
coverage = {extras = ["toml"], version = "~5.1.0"}
pytest-cov = "~2.8.1"

[tool.poetry.scripts]
test = "tasks:test"
reformat = "tasks:reformat"
lint = "tasks:lint"
typecheck = "tasks:typecheck"
verify-all = "tasks:verify_all"
find-releasable-changes = "tasks:find_releasable_changes"
prepare-release = "tasks:prepare_release"

[tool.black]
line-length = 120

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.5.1"  # do not edit manually. kept in sync with `tool.poetry` config via automation
tag_format = "v$version"

[tool.coverage.run]
branch = true

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
